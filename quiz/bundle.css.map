{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Question.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onDestroy, onMount } from \"svelte\";\n  import Question from \"./Question.svelte\";\n\n  const appName = \"Charles' Cool Quiz\";\n  const questionsToLoad = 10;\n  let categoryId = 9;\n  const categories = [\n    { name: \"General Knowledge\", id: \"any\" },\n    // { name: \"General Knowledge\", id: 9  },\n    { name: \"Science & Nature\", id: 17 },\n    { name: \"History\", id: 23 },\n    { name: \"Geography\", id: 22 }\n  ];\n\n  let quizLoading;\n  let quizStarted;\n  let showLoadMore;\n  let questions;\n  let visible_question;\n\n  let score = 0;\n  let currentIndex = 0;\n  let noanswered = 0;\n  let qulength = 1;\n  $: percentage = noanswered > 0 ? Math.round((score / noanswered) * 100) : 0;\n\n  async function getQuestions() {\n    let url = `https://opentdb.com/api.php?amount=${questionsToLoad}&type=multiple`;\n    if (categoryId !== \"any\") {\n      url = url + `&category=${categoryId}`;\n    }\n\n    const response = await fetch(url);\n    if (response.ok) {\n      const result = await response.json();\n      return result;\n    } else {\n      const error = await response.json();\n      throw error;\n    }\n  }\n\n  function startQuiz(category) {\n    categoryId = category.id;\n    quizLoading = true;\n    getQuestions().then(\n      result => {\n        questions = result.results;\n        quizLoading = false;\n        quizStarted = true;\n\n        qulength = questions.length;\n        visible_question = questions[currentIndex];\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  function reset() {\n    quizStarted = false;\n    showLoadMore = false;\n    score = 0;\n    noanswered = 0;\n    currentIndex = 0;\n  }\n\n  function loadMore() {\n    if (quizLoading === false) {\n      quizLoading = true;\n      showLoadMore = false;\n\n      getQuestions().then(result => {\n        quizLoading = false;\n        let newquestions = result.results;\n        newquestions.forEach(nq => {\n          questions.push(nq);\n        });\n        questions = questions;\n        qulength = questions.length;\n        loadNext();\n      });\n    }\n  }\n\n  function loadNext() {\n    visible_question = null;\n\n    setTimeout(() => {\n      if (currentIndex + 1 < questions.length) {\n        currentIndex++;\n        visible_question = questions[currentIndex];\n      } else {\n        // FINISHED\n        showLoadMore = true;\n      }\n    }, 100);\n  }\n\n  function questionAnswered(e) {\n    const q = e.detail;\n    noanswered++;\n    if (q.correct) {\n      score++;\n    }\n    loadNext();\n  }\n\n  //  schedules a callback to run as soon as the component has been mounted to the DOM.\n  onMount(() => {});\n\n  //  when component is destroy, unsubscribe from any subscriptions to prevent memory leaks\n  onDestroy(() => {});\n</script>\n\n<style>\n  header {\n    padding: 10px 20px;\n    margin: 0 0 20px;\n    background: #f32;\n    color: white;\n    font-size: 2em;\n    display: flex;\n    flex-wrap: nowrap;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n  }\n\n  header nav {\n    padding: 0;\n    display: inline-block;\n    text-align: right;\n    flex: 1;\n  }\n\n  header h1 {\n    display: inline-block;\n    flex: 1;\n  }\n\n  main {\n    padding-top: 80px;\n    padding-bottom: 80px;\n  }\n\n  .reset {\n    margin: 40px 0 0;\n    text-align: center;\n  }\n  .reset a {\n    color: #888;\n  }\n\n  .button_block {\n    padding: 20px;\n    font-size: 2.5em;\n    text-align: center;\n  }\n\n  .categories {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n  .categories .button {\n    margin: 0 7.5px 15px;\n  }\n</style>\n\n<header>\n\n  <h1>{appName}</h1>\n  <nav>\n    {#if quizStarted}Score: {score} ( {percentage}%){/if}\n\n  </nav>\n\n</header>\n\n<main>\n\n  <div class=\"container\">\n\n    {#if !quizStarted}\n      <div class=\"categories\">\n        {#each categories as category}\n          <a\n            href=\"#startquiz\"\n            class=\"button button_block \"\n            on:click|preventDefault={() => startQuiz(category)}>\n            {category.name}\n          </a>\n        {/each}\n      </div>\n    {/if}\n\n    {#if visible_question}\n      <Question question={visible_question} on:answered={questionAnswered} />\n    {/if}\n\n    {#if showLoadMore}\n      <a\n        href=\"#loadmore\"\n        on:click|preventDefault={loadMore}\n        class=\"button button_block\">\n        You scored {score} out of {noanswered}. Load more questions ?\n      </a>\n      <p class=\"reset\">\n        <a on:click|preventDefault={reset} href=\"#reset\">Start again</a>\n      </p>\n    {/if}\n\n    {#if quizLoading}\n      <p class=\"spinner\" />\n    {/if}\n\n  </div>\n</main>\n",
    "<script>\n  import { fly } from \"svelte/transition\";\n  import { createEventDispatcher } from \"svelte\";\n\n  // bubble up an event to the parent component\n  const dispatch = createEventDispatcher();\n\n  export let question;\n  const delay = 100;\n  let answers; // {text: string}[]\n  let canAnswer;\n  $: if (question) {\n    canAnswer = true;\n    if (!answers) {\n      setAnswers();\n    }\n  }\n\n  function setAnswers() {\n    const all = [];\n    question.incorrect_answers.forEach(a => {\n      all.push({ text: a, correct: null });\n    });\n    all.push({ text: question.correct_answer, correct: null });\n    answers = all.sort(function() {\n      return 0.5 - Math.random();\n    });\n  }\n\n  function chooseAnswer(answer) {\n    if (canAnswer) {\n      canAnswer = false;\n      if (answer.text === question.correct_answer) {\n        answer.correct = true;\n        question.correct = true;\n      } else {\n        answer.correct = false;\n        answers\n          .filter(a => a.text === question.correct_answer)\n          .forEach(a => {\n            a.correct = true;\n          });\n      }\n      answers = answers;\n\n      setTimeout(() => {\n        dispatch(\"answered\", question);\n      }, 1000);\n    }\n  }\n\n  function handleKeydown(e) {\n    const keyCode = event.keyCode;\n    // 1 -> 49,  2 -> 50, 9  ->57\n    if (keyCode >= 49 && keyCode <= 57) {\n      const questionIndex = keyCode - 48 - 1;\n      if (questionIndex < answers.length) {\n        const answer = answers[questionIndex];\n        chooseAnswer(answer);\n      }\n    }\n  }\n</script>\n\n<style>\n  ul {\n    font-size: 2.2em;\n  }\n  li {\n    position: relative;\n    font-size: 1em;\n    border: 1px solid #ddd;\n    padding: 15px 15px 15px 55px;\n    margin: 0 0 10px;\n    cursor: pointer;\n    transition: all 0.3s;\n  }\n\n  li span {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    color: white;\n    background: rgba(100, 100, 100, 0.19);\n    font-size: 24px;\n    text-align: center;\n    display: inline-block;\n    height: 30px;\n    width: 30px;\n    line-height: 30px;\n    border-radius: 50%;\n    font-weight: bold;\n  }\n  li:hover {\n    background-color: #eee;\n  }\n\n  li.correct {\n    background-color: #cfc;\n  }\n  li.incorrect {\n    background-color: #fcc;\n  }\n</style>\n\n<svelte:window on:keydown={handleKeydown} />\n\n<div class=\"box\" in:fly={{ delay: delay, duration: 500, y: 20, opacity: 0 }}>\n  <h2>\n    {@html question.question}\n  </h2>\n\n  <ul class=\"possible\">\n    {#each answers as answer, i}\n      <li\n        class:correct={answer.correct === true}\n        class:incorrect={answer.correct === false}\n        on:click|preventDefault={() => chooseAnswer(answer)}>\n        {@html answer.text}\n\n        <span>{i + 1}</span>\n      </li>\n    {/each}\n  </ul>\n\n</div>\n"
  ],
  "names": [],
  "mappings": "AAsHE,MAAM,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAChB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,GAAG,CACd,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,MAAM,CACjB,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,AACb,CAAC,AAED,qBAAM,CAAC,GAAG,eAAC,CAAC,AACV,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,KAAK,CACjB,IAAI,CAAE,CAAC,AACT,CAAC,AAED,qBAAM,CAAC,EAAE,eAAC,CAAC,AACT,OAAO,CAAE,YAAY,CACrB,IAAI,CAAE,CAAC,AACT,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAChB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,qBAAM,CAAC,CAAC,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AAED,aAAa,8BAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,WAAW,8BAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC,AACD,0BAAW,CAAC,OAAO,eAAC,CAAC,AACnB,MAAM,CAAE,CAAC,CAAC,KAAK,CAAC,IAAI,AACtB,CAAC;AC1GD,EAAE,4BAAC,CAAC,AACF,SAAS,CAAE,KAAK,AAClB,CAAC,AACD,EAAE,4BAAC,CAAC,AACF,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,GAAG,CACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAC5B,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAChB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,IAAI,AACtB,CAAC,AAED,gBAAE,CAAC,IAAI,cAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CACrC,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,8BAAE,MAAM,AAAC,CAAC,AACR,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,EAAE,QAAQ,4BAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,AACxB,CAAC,AACD,EAAE,UAAU,4BAAC,CAAC,AACZ,gBAAgB,CAAE,IAAI,AACxB,CAAC"
}